#!/bin/bash

# Скрипт, формирующий Markdown-файлы из JSON-схем для использования в
# документации

# Справка
usage()
{
  echo "$0:                                                              " 1>&2
  echo "  Формирует Markdown-файлы из JSON-cхем                          " 1>&2
  echo "                                                                 " 1>&2
  echo "Использование: $0 [опции]                                        " 1>&2
  echo "Опции:                                                           " 1>&2
  echo "  -h         Показать справку и выйти                            " 1>&2
  echo "  -m DIR     Использовать директорию DIR в качестве целевой      " 1>&2
  echo "             для Markdown-файлов. Значение по умолчанию —        " 1>&2
  echo "             docs/schemas относительно текущей директории.       " 1>&2
  echo "  -j DIR     Использовать директорию DIR в качестве исходной     " 1>&2
  echo "             для JSON-схем. Значение по умолчанию —              " 1>&2
  echo "             resources/schemas относительно текущей директории.  " 1>&2
  echo "             JSON-схемы ищутся также во всех дочерних            " 1>&2
  echo "             директориях.                                        " 1>&2

  exit 1
}

MD_DIR="docs/schemas"
SCHEMA_DIR="resources/schemas"

# Разбор аргументов командной строки
while getopts "hm:j:" opt
do
  case "$opt" in
  "h")
    usage
    ;;
  "m")
    MD_DIR="$OPTARG"
    ;;
  "j")
    SCHEMA_DIR="$OPTARG"
    ;;
  *)
    usage
    ;;
  esac
done
# Сдвигаем аргументы
shift "$((OPTIND - 1))"
# Если что-то ещё осталось, показываем справку
[[ -z "$@" ]] || usage

SCHEMA_SUFFIX='_schema.json'

# Устанавливаем разделитель для формирования списков
IFS=$'\r\n'
schemas=(`find $SCHEMA_DIR -name "*$SCHEMA_SUFFIX"`)
for schema in "${schemas[@]}"
do
  filename=${schema##"$SCHEMA_DIR/"}
  md="$MD_DIR/${filename%$SCHEMA_SUFFIX}.md"
  dir=`dirname "$md"`
  [[ -d "$dir" ]] || mkdir -p "$dir"
  sed -e 's/^/    /' "$schema" > "$md"
done
