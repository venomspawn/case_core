# frozen_string_literal: true

require_relative 'query/datasets/united_filtered_main_ids'

module CaseCore
  # @author Александр Ильчуков <a.s.ilchukov@cit.rkomi.ru>
  #
  # Пространство имён классов объектов, посвящённых поиску записей
  #
  module Search
    # @author Александр Ильчуков <a.s.ilchukov@cit.rkomi.ru>
    #
    # Класс, предоставляющий функции выборки и подсчёта количества записей
    #
    class Query
      # Возвращает запрос Sequel на получение записей. Выборка поддерживает
      # условия на значения полей и атрибутов, сортировку по значениям полей
      # основной таблицы, сдвиг и ограничение на количество возвращаемых
      # записей.
      #
      # @param [Class] main_model
      #   модель записей основной таблицы
      #
      # @param [Class] attr_model
      #   модель записей атрибутов
      #
      # @param [Hash] params
      #   ассоциативный массив параметров выборки. Все ключи в этом
      #   ассоциативном массиве, а также в ассоциативных массивах, вложенных в
      #   него, должны быть приведены к типу Symbol. Поддерживаются следующие
      #   параметры (ключи).
      #
      #   *   `filter` — значение параметра интерпретируется в качестве условий
      #       на значения полей и атрибутов. В качестве значений поддерживаются
      #       ассоциативные массивы и списки ассоциативных массивов.
      #
      #       +   Если значением является ассоциативный массив, то его ключи
      #           интерпретируются в качестве названий полей и атрибутов, а
      #           значения — в качестве условий на эти поля и атрибуты, при
      #           этом все условия должны быть выполнены одновременно. Условие
      #           может быть следующих типов.
      #
      #           -   Условие в виде ассоциативного массива поддерживает
      #               следующие ключи:
      #
      #               *   `exclude` — значение по этому ключу интерпретируется
      #                   в формате параметра `filter`, а результирующим
      #                   условием выводится отрицание условия, заданного
      #                   значением;
      #               *   `like` — значение по этому ключу интерпретируются в
      #                   качестве шаблона частичного совпадения (см. оператор
      #                   `LIKE` в SQL-контструкции `SELECT`);
      #               *   `min` — значение по этому ключу задаёт нижнюю границу
      #                   для значений поля или атрибута;
      #               *   `max` — значение по этому ключу задаёт верхнюю
      #                   границу для значений поля или атрибута.
      #
      #               При этом если в ассоциативном массиве присутствует
      #               несколько ключей, приведённых выше, то считается, что
      #               условия, заданные соответствующими значениями, должны
      #               быть выполнены одновременно. Если же в ассоциативном
      #               массиве отсутствуют ключи, приведённые выше, то
      #               считается, что такому условию удовлетворяют все записи.
      #
      #           -   Условие в виде списка задаёт значения, которыми должно
      #               обладать поле или атрибут для того, чтобы условие
      #               выполнилось.
      #
      #           -   Условие, отличающееся от списка или ассоциативного
      #               массива, интерпретируется в качестве значения, которым
      #               должно обладать поле или атрибут для того, чтобы условие
      #               выполнилось.
      #
      #       +   Если значением является список ассоциативных массивов, то его
      #           элементы интерпретируются по правилу, приведённым в
      #           предыдущем пункте, а результирующее условие считается
      #           выполненным если выполнено хотя бы одно из результирующих
      #           условий, заданных элементами. При этом если значением
      #           является пустой список, то считается, что такому условию
      #           удовлетворяют все записи.
      #
      #   *   `limit` — значение параметра интерпретируется в качестве
      #       ограничения на количество записей, возвращаемых результирующим
      #       запросом.
      #
      #   *   `offset` — значение параметра интерпретируется в качестве сдвига
      #       в списке записей, возвращаемых результирующим запросом.
      #
      #   *   `order` — значение параметра может быть только ассоциативным
      #       массивом, ключи которого интерпретируются как названия полей, по
      #       которым должны быть отсортированы записи, возвращаемые
      #       результирующим запросом, а значения задают направление сортировки
      #       и могут принимать лишь значения `asc` (по возрастанию) и `desc`
      #       (по убыванию). Поддерживаются лишь названия полей основной
      #       таблицы. Если значение параметра не указано, но присутствует хотя
      #       бы один из параметров `limit` или `offset` с непустым значением,
      #       то подразумевается, что сортировка идёт по возрастанию поля `id`.
      #
      # @return [Sequel::Dataset]
      #   результирующий запрос Sequel
      #
      def self.dataset(main_model, attr_model, params)
        new(main_model, attr_model, params).dataset
      end

      # Инициализирует объект класса
      #
      # @param [Class] main_model
      #   модель записей основной таблицы
      #
      # @param [Class] attr_model
      #   модель записей атрибутов
      #
      # @param [Hash] params
      #   ассоциативный массив параметров выборки
      #
      def initialize(main_model, attr_model, params)
        @main_model = main_model
        @attr_model = attr_model
        @params = params
      end

      # Возвращает запрос Sequel на получение записей
      #
      # @return [Sequel::Dataset]
      #   результирующий запрос Sequel
      #
      def dataset
        filtered_dataset.limit(limit).offset(offset).order(*order_columns)
      end

      private

      # Модель записей основной таблицы
      #
      # @return [Class]
      #   модель записей основной таблицы
      #
      attr_reader :main_model

      # Модель записей атрибутов
      #
      # @return [Class]
      #   модель записей атрибутов
      #
      attr_reader :attr_model

      # Ассоциативный массив параметров
      #
      # @return [Hash]
      #   ассоциативный массив параметров
      #
      attr_reader :params

      # Возвращает значение параметра `filter`
      #
      # @return [Object]
      #   значение параметра `filter`
      #
      def filter
        params[:filter]
      end

      # Возвращает список ассоциативных массивов с информацией об условиях на
      # поля и атрибуты
      #
      # @return [Array<Hash>]
      #   список ассоциативных массивов с информацией об условиях на поля и
      #   атрибуты
      #
      def filters
        case filter
        when NilClass
          []
        when Array
          filter
        else
          [filter]
        end
      end

      # Возвращает значение параметра `limit`
      #
      # @return [Object]
      #   значение параметра `limit`
      #
      def limit
        params[:limit]
      end

      # Возвращает значение параметра `offset`
      #
      # @return [Object]
      #   значение параметра `offset`
      #
      def offset
        params[:offset]
      end

      # Возвращает значение параметра `order` или значение по умолчанию, если
      # значение отсутствует
      #
      # @return [Hash]
      #   результирующее значение
      #
      def order
        @order ||= params[:order] || default_order
      end

      # Возвращает значение параметра `order` по умолчанию
      #
      # @return [Hash]
      #   значение параметра `order` по умолчанию
      #
      def default_order
        limit.nil? && offset.nil? ? {} : { id: :asc }
      end

      # Возвращает список с информацией о сортировке записей
      #
      # @return [Array<Sequel::SQL::OrderedExpression>]
      #   результирующий список
      #
      def order_columns
        order.map { |key, dir| Sequel.send(dir, key) }
      end

      # Возвращает запрос Sequel на получение идентификаторов записей основной
      # таблицы, удовлетворяющих условиям, или `nil`, если условия отсутствуют
      #
      # @return [Sequel::Dataset]
      #   результирующий запрос
      #
      # @return [NilClass]
      #   если условия отсутствуют
      #
      def main_ids_dataset
        Datasets::UnitedFilteredMainIDs
          .new(main_model, attr_model, filters)
          .dataset
      end

      # Возвращает запрос Sequel на получение записей основной таблицы,
      # удовлетворяющих условиям
      #
      # @return [Sequel::Dataset]
      #   результирующий запрос
      #
      def filtered_dataset
        main_ids = main_ids_dataset
        main_ids.nil? ? main_model.dataset : main_model.where(id: main_ids)
      end
    end
  end
end
